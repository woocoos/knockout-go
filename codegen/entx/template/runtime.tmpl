{{/* gotype: entgo.io/ent/entc/gen.Graph */}}
{{ define "runtime/register" }}
import (
	{{- with $.Config.Schema }}
		"{{ . }}"
	{{- end }}
	{{- range $n := $.Nodes }}
		{{ $n.PackageAlias }} "{{ $.Config.Package }}/{{ $n.PackageDir }}"
		{{- /* Import external packages */}}
		{{- template "import/types" $n }}
	{{- end }}

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)


// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
{{- range $n := $.Nodes }}
	{{- $pkg := $n.Package }}
	{{- $schema := base $.Config.Schema }}
	{{- with $n.RuntimeMixin }}
		{{ $pkg }}Mixin := {{ $schema }}.{{ $n.Name }}{}.Mixin()
	{{- end }}
	{{- with $policies := $n.PolicyPositions }}
		{{- /* Policies defined in schema and mixins. */}}
		{{ $pkg }}.Policy = privacy.NewPolicies({{ range $idx := $n.MixedInPolicies }}{{ $pkg }}Mixin[{{ $idx }}],{{ end }}{{ $schema }}.{{ $n.Name }}{})
		{{ $pkg }}.Hooks[0] = func(next ent.Mutator) ent.Mutator {
			return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
				if err := {{ $pkg }}.Policy.EvalMutation(ctx, m); err != nil {
					return nil, err
				}
				return next.Mutate(ctx, m)
			})
		}
	{{- end }}
	{{- with $hooks := $n.HookPositions }}
		{{- /* Hooks defined in schema mixins. */}}
		{{- with $idx := $n.MixedInHooks }}
			{{- range $i := $idx }}
				{{ print $pkg "MixinHooks" $i }} := {{ $pkg }}Mixin[{{ $i }}].Hooks()
			{{- end }}
		{{- end }}
		{{- /* If there are hooks defined in the schema. */}}
		{{- $schemaHooks := false }}{{ range $p := $hooks }}{{ if not $p.MixedIn }}{{ $schemaHooks = true }}{{ end }}{{ end }}
		{{- if $schemaHooks }}
			{{ print $pkg "Hooks" }} := {{ $schema }}.{{ $n.Name }}{}.Hooks()
		{{- end }}
		{{- range $i, $p := $hooks }}
			{{- if $n.NumPolicy }}
				{{ $i = add $i 1 }}
			{{- end }}
			{{- if $p.MixedIn }}
				{{ print $pkg ".Hooks" }}[{{ $i }}] =  {{ print $pkg "MixinHooks" $p.MixinIndex }}[{{ $p.Index }}]
			{{- else }}
				{{ print $pkg ".Hooks" }}[{{ $i }}] = {{ print $pkg "Hooks" }}[{{ $p.Index }}]
			{{- end }}
		{{- end }}
	{{- end }}
	{{- with $inters := $n.InterceptorPositions }}
		{{- /* Interceptors defined in schema mixins. */}}
		{{- with $idx := $n.MixedInInterceptors }}
			{{- range $i := $idx }}
				{{ print $pkg "MixinInters" $i }} := {{ $pkg }}Mixin[{{ $i }}].Interceptors()
			{{- end }}
		{{- end }}
		{{- /* If there are interceptors defined in the schema. */}}
		{{- $schemaInters := false }}{{ range $p := $inters }}{{ if not $p.MixedIn }}{{ $schemaInters = true }}{{ end }}{{ end }}
		{{- if $schemaInters }}
			{{ print $pkg "Inters" }} := {{ $schema }}.{{ $n.Name }}{}.Interceptors()
		{{- end }}
		{{- range $i, $p := $inters }}
			{{- if $p.MixedIn }}
				{{ print $pkg ".Interceptors" }}[{{ $i }}] =  {{ print $pkg "MixinInters" $p.MixinIndex }}[{{ $p.Index }}]
			{{- else }}
				{{ print $pkg ".Interceptors" }}[{{ $i }}] = {{ print $pkg "Inters" }}[{{ $p.Index }}]
			{{- end }}
		{{- end }}
	{{- end }}
	{{- if or $n.HasDefault $n.HasUpdateDefault $n.HasValidators $n.HasValueScanner }}
		{{- with $idx := $n.MixedInFields }}
			{{- range $i := $idx }}
				{{ print $pkg "MixinFields" $i }} := {{ $pkg }}Mixin[{{ $i }}].Fields()
				_ = {{ $pkg }}MixinFields{{ $i }}
			{{- end }}
		{{- end }}
		{{- $fields := $n.Fields }}{{ if $n.HasOneFieldID }}{{ if $n.ID.UserDefined }}{{ $fields = append $fields $n.ID }}{{ end }}{{ end }}
		{{- with $fields }}
			{{ $pkg }}Fields := {{ $schema }}.{{ $n.Name }}{}.Fields()
			_ = {{ $pkg }}Fields
		{{- end }}
		{{- range $i, $f := $fields }}
			{{- $desc := print $pkg "Desc" $f.StructField }}
			{{- /* enum default values handled near their declarations (in type package). */}}
			{{- if or (and $f.Default (not $f.IsEnum)) $f.UpdateDefault $f.Validators $f.HasValueScanner }}
				// {{ $desc }} is the schema descriptor for {{ $f.Name }} field.
				{{- if $f.Position.MixedIn }}
					{{ $desc }} := {{ print $pkg "MixinFields" $f.Position.MixinIndex }}[{{ $f.Position.Index }}].Descriptor()
				{{- else }}
					{{ $desc }} := {{ $pkg }}Fields[{{ $f.Position.Index }}].Descriptor()
				{{- end }}
			{{- end }}
			{{- if and $f.Default (not $f.IsEnum) }}
				{{- $default := print $pkg "." $f.DefaultName }}
				// {{ $default }} holds the default value on creation for the {{ $f.Name }} field.
				{{- $defaultType := print $f.Type.Type }}{{ if $f.DefaultFunc }}{{ $defaultType = print "func() " $f.Type }}{{ end }}
				{{- if and $f.HasGoType (not (hasPrefix $defaultType "func")) }}
					{{- if or $f.IsJSON $f.IsOther }}
						{{ $default }} = {{ $desc }}.Default.({{ $f.Type }})
					{{- else }}
						{{ $default }} = {{ $f.Type }}({{ $desc }}.Default.({{ $defaultType }}))
					{{- end }}
				{{- else }}
					{{ $default }} = {{ $desc }}.Default.({{ $defaultType }})
				{{- end }}
			{{- end }}
			{{- if $f.UpdateDefault }}
				{{- $default := print $pkg "." $f.UpdateDefaultName }}
				// {{ $default }} holds the default value on update for the {{ $f.Name }} field.
				{{ $default }} = {{ $desc }}.UpdateDefault.(func() {{ $f.Type }})
			{{- end }}
			{{- with $f.HasValueScanner }}
				{{- $valuescan := print $pkg ".ValueScanner." $f.StructField }}
				{{ $valuescan }} = {{ $desc }}.ValueScanner.(field.TypeValueScanner[{{ $f.Type }}])
			{{- end }}
			{{- with $f.Validators }}
				{{- $name := print $pkg "." $f.Validator }}
				{{- $type := $f.Type.Type.String }}
				{{- if isCustomerField $f }} {{- $type = $f.Type.RType.String }} {{ end }}
				{{- if $f.IsJSON }}
					{{- $type = $f.Type.String }}
				{{- end }}
				// {{ $name }} is a validator for the "{{ $f.Name }}" field. It is called by the builders before save.
				{{- if eq $f.Validators 1 }}
					{{ $name }} = {{ $desc }}.Validators[0].({{ printf "func (%s) error" $type }})
				{{- else }}
					{{ $name }} = func() {{ printf "func (%s) error" $type }} {
						validators := {{ $desc }}.Validators
						fns := [...]func({{ $type }}) error {
							{{- range $j, $n := xrange $f.Validators }}
								validators[{{ $j }}].(func({{ $type }}) error),
							{{- end }}
						}
						return func({{ $f.BuilderField }} {{ $type }}) error {
							for _, fn := range fns {
								if err := fn({{ $f.BuilderField }}); err != nil {
									return err
								}
							}
							return nil
						}
					}()
				{{- end }}
		{{- end }}
	{{- end }}
{{- end }}
{{- end }}
}
{{ end }}
