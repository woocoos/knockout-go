// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/integration/gentest/ent/refschema"
	"github.com/woocoos/knockout-go/integration/gentest/ent/user"
)

// RefSchemaCreate is the builder for creating a RefSchema entity.
type RefSchemaCreate struct {
	config
	mutation *RefSchemaMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (rsc *RefSchemaCreate) SetName(s string) *RefSchemaCreate {
	rsc.mutation.SetName(s)
	return rsc
}

// SetUserID sets the "user_id" field.
func (rsc *RefSchemaCreate) SetUserID(i int) *RefSchemaCreate {
	rsc.mutation.SetUserID(i)
	return rsc
}

// SetUser sets the "user" edge to the User entity.
func (rsc *RefSchemaCreate) SetUser(u *User) *RefSchemaCreate {
	return rsc.SetUserID(u.ID)
}

// Mutation returns the RefSchemaMutation object of the builder.
func (rsc *RefSchemaCreate) Mutation() *RefSchemaMutation {
	return rsc.mutation
}

// Save creates the RefSchema in the database.
func (rsc *RefSchemaCreate) Save(ctx context.Context) (*RefSchema, error) {
	return withHooks(ctx, rsc.sqlSave, rsc.mutation, rsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *RefSchemaCreate) SaveX(ctx context.Context) *RefSchema {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *RefSchemaCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *RefSchemaCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *RefSchemaCreate) check() error {
	if _, ok := rsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RefSchema.name"`)}
	}
	if _, ok := rsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "RefSchema.user_id"`)}
	}
	if _, ok := rsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RefSchema.user"`)}
	}
	return nil
}

func (rsc *RefSchemaCreate) sqlSave(ctx context.Context) (*RefSchema, error) {
	if err := rsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rsc.mutation.id = &_node.ID
	rsc.mutation.done = true
	return _node, nil
}

func (rsc *RefSchemaCreate) createSpec() (*RefSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &RefSchema{config: rsc.config}
		_spec = sqlgraph.NewCreateSpec(refschema.Table, sqlgraph.NewFieldSpec(refschema.FieldID, field.TypeInt))
	)
	if value, ok := rsc.mutation.Name(); ok {
		_spec.SetField(refschema.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := rsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   refschema.UserTable,
			Columns: []string{refschema.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RefSchemaCreateBulk is the builder for creating many RefSchema entities in bulk.
type RefSchemaCreateBulk struct {
	config
	err      error
	builders []*RefSchemaCreate
}

// Save creates the RefSchema entities in the database.
func (rscb *RefSchemaCreateBulk) Save(ctx context.Context) ([]*RefSchema, error) {
	if rscb.err != nil {
		return nil, rscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*RefSchema, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RefSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *RefSchemaCreateBulk) SaveX(ctx context.Context) []*RefSchema {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *RefSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *RefSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}
