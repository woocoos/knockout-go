// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/shopspring/decimal"
)

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name   string
	Money  *decimal.Decimal
	Avatar *string
	RefIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	if v := i.Money; v != nil {
		m.SetMoney(*v)
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if v := i.RefIDs; len(v) > 0 {
		m.AddRefIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name         *string
	ClearMoney   bool
	Money        *decimal.Decimal
	ClearAvatar  bool
	Avatar       *string
	ClearRefs    bool
	AddRefIDs    []int
	RemoveRefIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearMoney {
		m.ClearMoney()
	}
	if v := i.Money; v != nil {
		m.SetMoney(*v)
	}
	if i.ClearAvatar {
		m.ClearAvatar()
	}
	if v := i.Avatar; v != nil {
		m.SetAvatar(*v)
	}
	if i.ClearRefs {
		m.ClearRefs()
	}
	if v := i.AddRefIDs; len(v) > 0 {
		m.AddRefIDs(v...)
	}
	if v := i.RemoveRefIDs; len(v) > 0 {
		m.RemoveRefIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
