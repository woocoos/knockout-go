package gentest

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/shopspring/decimal"
	"github.com/woocoos/knockout-go/integration/gentest/ent"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, money *decimal.Decimal) (*ent.User, error) {
	return r.client.User.Create().SetName(name).SetNillableMoney(money).Save(ctx)
}

// CreateUserByInput is the resolver for the createUserByInput field.
func (r *mutationResolver) CreateUserByInput(ctx context.Context, input ent.CreateUserInput) (*ent.User, error) {
	return ent.FromContext(ctx).User.Create().SetInput(input).Save(ctx)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int, input ent.UpdateUserInput) (*ent.User, error) {
	return ent.FromContext(ctx).User.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int) (bool, error) {
	err := ent.FromContext(ctx).User.DeleteOneID(id).Exec(ctx)
	return err == nil, err
}

// DeleteUser1 is the resolver for the deleteUser1 field.
func (r *mutationResolver) DeleteUser1(ctx context.Context, id int) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteUser1 - deleteUser1"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
