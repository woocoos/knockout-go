// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/integration/nocache/ent/nocache"
)

// NoCacheCreate is the builder for creating a NoCache entity.
type NoCacheCreate struct {
	config
	mutation *NoCacheMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ncc *NoCacheCreate) SetName(s string) *NoCacheCreate {
	ncc.mutation.SetName(s)
	return ncc
}

// SetUserID sets the "user_id" field.
func (ncc *NoCacheCreate) SetUserID(i int) *NoCacheCreate {
	ncc.mutation.SetUserID(i)
	return ncc
}

// Mutation returns the NoCacheMutation object of the builder.
func (ncc *NoCacheCreate) Mutation() *NoCacheMutation {
	return ncc.mutation
}

// Save creates the NoCache in the database.
func (ncc *NoCacheCreate) Save(ctx context.Context) (*NoCache, error) {
	return withHooks(ctx, ncc.sqlSave, ncc.mutation, ncc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ncc *NoCacheCreate) SaveX(ctx context.Context) *NoCache {
	v, err := ncc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncc *NoCacheCreate) Exec(ctx context.Context) error {
	_, err := ncc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncc *NoCacheCreate) ExecX(ctx context.Context) {
	if err := ncc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ncc *NoCacheCreate) check() error {
	if _, ok := ncc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "NoCache.name"`)}
	}
	if _, ok := ncc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "NoCache.user_id"`)}
	}
	return nil
}

func (ncc *NoCacheCreate) sqlSave(ctx context.Context) (*NoCache, error) {
	if err := ncc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ncc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ncc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ncc.mutation.id = &_node.ID
	ncc.mutation.done = true
	return _node, nil
}

func (ncc *NoCacheCreate) createSpec() (*NoCache, *sqlgraph.CreateSpec) {
	var (
		_node = &NoCache{config: ncc.config}
		_spec = sqlgraph.NewCreateSpec(nocache.Table, sqlgraph.NewFieldSpec(nocache.FieldID, field.TypeInt))
	)
	if value, ok := ncc.mutation.Name(); ok {
		_spec.SetField(nocache.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ncc.mutation.UserID(); ok {
		_spec.SetField(nocache.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	return _node, _spec
}

// NoCacheCreateBulk is the builder for creating many NoCache entities in bulk.
type NoCacheCreateBulk struct {
	config
	err      error
	builders []*NoCacheCreate
}

// Save creates the NoCache entities in the database.
func (nccb *NoCacheCreateBulk) Save(ctx context.Context) ([]*NoCache, error) {
	if nccb.err != nil {
		return nil, nccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(nccb.builders))
	nodes := make([]*NoCache, len(nccb.builders))
	mutators := make([]Mutator, len(nccb.builders))
	for i := range nccb.builders {
		func(i int, root context.Context) {
			builder := nccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NoCacheMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, nccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, nccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, nccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (nccb *NoCacheCreateBulk) SaveX(ctx context.Context) []*NoCache {
	v, err := nccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nccb *NoCacheCreateBulk) Exec(ctx context.Context) error {
	_, err := nccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nccb *NoCacheCreateBulk) ExecX(ctx context.Context) {
	if err := nccb.Exec(ctx); err != nil {
		panic(err)
	}
}
