// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/woocoos/knockout-go/integration/helloapp/ent/hello"
	"github.com/woocoos/knockout-go/integration/helloapp/ent/world"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 2)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   hello.Table,
			Columns: hello.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: hello.FieldID,
			},
		},
		Type: "Hello",
		Fields: map[string]*sqlgraph.FieldSpec{
			hello.FieldName:     {Type: field.TypeString, Column: hello.FieldName},
			hello.FieldTenantID: {Type: field.TypeInt, Column: hello.FieldTenantID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   world.Table,
			Columns: world.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: world.FieldID,
			},
		},
		Type: "World",
		Fields: map[string]*sqlgraph.FieldSpec{
			world.FieldDeletedAt: {Type: field.TypeTime, Column: world.FieldDeletedAt},
			world.FieldTenantID:  {Type: field.TypeInt, Column: world.FieldTenantID},
			world.FieldName:      {Type: field.TypeString, Column: world.FieldName},
			world.FieldPowerBy:   {Type: field.TypeString, Column: world.FieldPowerBy},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (hq *HelloQuery) addPredicate(pred func(s *sql.Selector)) {
	hq.predicates = append(hq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the HelloQuery builder.
func (hq *HelloQuery) Filter() *HelloFilter {
	return &HelloFilter{config: hq.config, predicateAdder: hq}
}

// addPredicate implements the predicateAdder interface.
func (m *HelloMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the HelloMutation builder.
func (m *HelloMutation) Filter() *HelloFilter {
	return &HelloFilter{config: m.config, predicateAdder: m}
}

// HelloFilter provides a generic filtering capability at runtime for HelloQuery.
type HelloFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *HelloFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *HelloFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(hello.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *HelloFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(hello.FieldName))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *HelloFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(hello.FieldTenantID))
}

// addPredicate implements the predicateAdder interface.
func (wq *WorldQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WorldQuery builder.
func (wq *WorldQuery) Filter() *WorldFilter {
	return &WorldFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WorldMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WorldMutation builder.
func (m *WorldMutation) Filter() *WorldFilter {
	return &WorldFilter{config: m.config, predicateAdder: m}
}

// WorldFilter provides a generic filtering capability at runtime for WorldQuery.
type WorldFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WorldFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int predicate on the id field.
func (f *WorldFilter) WhereID(p entql.IntP) {
	f.Where(p.Field(world.FieldID))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *WorldFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(world.FieldDeletedAt))
}

// WhereTenantID applies the entql int predicate on the tenant_id field.
func (f *WorldFilter) WhereTenantID(p entql.IntP) {
	f.Where(p.Field(world.FieldTenantID))
}

// WhereName applies the entql string predicate on the name field.
func (f *WorldFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(world.FieldName))
}

// WherePowerBy applies the entql string predicate on the power_by field.
func (f *WorldFilter) WherePowerBy(p entql.StringP) {
	f.Where(p.Field(world.FieldPowerBy))
}
