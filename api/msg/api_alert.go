// Code generated by woco, DO NOT EDIT.

package msg

import (
	"context"
	"errors"
	"io"
	"net/http"
	"net/url"
	"strconv"
)

type AlertAPI api

// (GET /alerts)
func (a *AlertAPI) GetAlerts(ctx context.Context, req *GetAlertsRequest) (ret GettableAlerts, resp *http.Response, err error) {
	var (
		contentType string
		body        any
	)
	path := "/alerts"
	queryParams := url.Values{}
	if req.Active != nil {
		queryParams.Add("active", strconv.FormatBool(*req.Active))
	}
	if req.Silenced != nil {
		queryParams.Add("silenced", strconv.FormatBool(*req.Silenced))
	}
	if req.Inhibited != nil {
		queryParams.Add("inhibited", strconv.FormatBool(*req.Inhibited))
	}
	if req.Unprocessed != nil {
		queryParams.Add("unprocessed", strconv.FormatBool(*req.Unprocessed))
	}
	if req.Filter != nil {
		for _, v := range req.Filter {
			queryParams.Add("filter", v)
		}
	}
	if req.Receiver != nil {
		queryParams.Add("receiver", *req.Receiver)
	}

	request, err := a.client.prepareRequest("GET", a.client.cfg.BasePath+path, contentType, body)
	if err != nil {
		return
	}
	request.URL.RawQuery = queryParams.Encode()
	accept := selectHeaderAccept([]string{"application/json"})
	request.Header.Set("Accept", accept)
	resp, err = a.client.Do(request)
	if err != nil {
		return
	}
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if resp.StatusCode == http.StatusOK {
		err = a.client.decode(respBody, &ret, resp.Header.Get("Content-Type"))
		if err == nil {
			return
		}
	} else if resp.StatusCode >= 300 {
		err = errors.New(string(respBody))
	}

	return
}

// (POST /alerts)
func (a *AlertAPI) PostAlerts(ctx context.Context, req *PostAlertsRequest) (resp *http.Response, err error) {
	var (
		contentType string
		body        any
	)
	path := "/alerts"
	contentType = selectHeaderContentType([]string{"application/json"})
	body = req

	request, err := a.client.prepareRequest("POST", a.client.cfg.BasePath+path, contentType, body)
	if err != nil {
		return
	}
	resp, err = a.client.Do(request)
	if err != nil {
		return
	}
	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	if resp.StatusCode == http.StatusOK {
		return
	} else if resp.StatusCode >= 300 {
		err = errors.New(string(respBody))
	}

	return
}
